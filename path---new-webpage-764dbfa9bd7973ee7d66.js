webpackJsonp([64756736902813],{553:function(e,t){e.exports={data:{markdownRemark:{html:'<h1>The technologies discovered for this site</h1>\n<p>I had some requirements. With my nose deep down in javascript most of the time, I looked for some way to create a portfolio or blog or something to document a little about what I am doing as a developer.</p>\n<h2>about flexbox</h2>\n<p>In my position I\'m spoiled with expert collegues on css and styling, which meant that the previously hard earned skills have met a rough wakening the latest time. The flex-box styling for example.</p>\n<h2>ease of creating content</h2>\n<p>This tool introduced rendering of markdown-files into html. It makes creation of content focused to simple syntax. Fantastic. The system builds all views programatically. Yes, a lot of effort to set up this first time, but as normal with the web it is about learn and use the efforts of many other developers. Thank you.\n<a href="https://github.com/gatsbyjs/gatsby/tree/master/examples#gatsby-example-websites">https://github.com/gatsbyjs/gatsby/tree/master/examples#gatsby-example-websites</a>\nEgghead.io has more info about Gatsby: <a href="https://egghead.io/lessons/gatsby-install-gatsby-and-scaffold-a-blog">https://egghead.io/lessons/gatsby-install-gatsby-and-scaffold-a-blog</a></p>\n<h2>node js</h2>\n<p>Always a pleasure to return to node. I\'m not a backend developer, although some effort has been done in PHP. Node-js is by far the most effective backend system I\'ve used. To extend the instructions from tutorials, examples and documentation about gatsby, some local work was done here too.</p>\n<h2>graphql</h2>\n<p>And what an exiting future for the alternative of rest-apis! The solutions graphQL proposes seems like a superb cure to align robustness and maintenance work of dynamic data-fetching from various endpoints.\n<a href="https://www.howtographql.com/">https://www.howtographql.com/</a>   <a href="https://www.howtographql.com/basics/3-big-picture/">https://www.howtographql.com/basics/3-big-picture/</a>  </p>\n<h2>css-in-js</h2>\n<p>Also promising. The scoped solution of css for react-components. Yes, go ahead. Import everything to javascript. Everything into react, modules and what not. The idea of collecting react-component and styling into small entities usable as lego-bricks is appealing. The connection between css and elements gets less hidden than with the ubiquitous mega-large css-sheets normally present. I like that idea. The drawback I see as a beginner in that area, is the bloating with css-css-css-css of previously clean modules, but the patterns and abstraction around this will improve. Its on me.\n<a href="https://www.styled-components.com/">https://www.styled-components.com/</a>\n<a href="https://www.gatsbyjs.org/docs/styled-components">https://www.gatsbyjs.org/docs/styled-components</a></p>',timeToRead:2,frontmatter:{title:"This new webpage",date:"April 08, 2018",tags:["flexbox","graphql","gatsby","tools","test-tag"],excerpt:"The equipment for this site."}}},pathContext:{slug:"/new-webpage/",tagLinkPrefix:"tags",tags:["flexbox","graphql","gatsby","tools","test-tag"],previous:null,next:"/eslint-prettier-for-atom/"}}}});
//# sourceMappingURL=path---new-webpage-764dbfa9bd7973ee7d66.js.map